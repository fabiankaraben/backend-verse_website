{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/golang/variables/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Backend-Verse"}},"markdownRemark":{"id":"a29ec68e-2166-5326-889e-7090c50f3a08","excerpt":"Variables point to a memory location which stores some kind of value. The  parameter (in the below syntax) represents the type of value that can be stored inâ€¦","html":"<p>Variables point to a memory location which stores some kind of value.</p>\n<p>The <code class=\"language-text\">type</code> parameter (in the below syntax) represents the type of value that can be stored in the memory location.</p>\n<p>Variable can be declared using the syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token operator\">&lt;</span>variable_name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">type</span><span class=\"token operator\">></span></code></pre></div>\n<p>Once You declare a variable of a type You can assign the variable to any value of that type.</p>\n<p>You can also give an initial value to a variable during the declaration itself using</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token operator\">&lt;</span>variable_name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">type</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>value<span class=\"token operator\">></span></code></pre></div>\n<p>If You declare the variable with an initial value, Go infer the type of the variable from the type of value assigned.</p>\n<p>So, you can omit the type during the declaration using the syntax</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token operator\">&lt;</span>variable_name<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>value<span class=\"token operator\">></span></code></pre></div>\n<p>Also, you can declare multiple variables with the syntax</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token operator\">&lt;</span>variable_name1<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>variable_name2<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>value1<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>value2<span class=\"token operator\">></span></code></pre></div>\n<p>The program below has some examples of variable declarations</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Declaring a integer variable x</span>\n\t<span class=\"token keyword\">var</span> x <span class=\"token builtin\">int</span>\n\tx <span class=\"token operator\">=</span> <span class=\"token number\">3</span>                <span class=\"token comment\">// Assigning x the value 3</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x:\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Prints 3</span>\n\n\t<span class=\"token comment\">// Declaring a integer variable y with value 20 in a single statement and prints it</span>\n\t<span class=\"token keyword\">var</span> y <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y:\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Declaring a variable z with value 50 and prints it</span>\n\t<span class=\"token comment\">// Here type int is not explicitly mentioned</span>\n\t<span class=\"token keyword\">var</span> z <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z:\"</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Multiple variables are assigned in single line- i with an integer and j with a string</span>\n\t<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i and j:\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The output will be</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">x: 3\ny: 20\nz: 50\ni and j: 100 hello</code></pre></div>\n<p>Go also provides an easy way of declaring the variables with value by omitting the var keyword using</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token operator\">&lt;</span>variable_name<span class=\"token operator\">></span> <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;</span>value<span class=\"token operator\">></span></code></pre></div>\n<p>Note that You used <code class=\"language-text\">:=</code> instead of <code class=\"language-text\">=</code>.</p>\n<p>You cannot use <code class=\"language-text\">:=</code> just to assign a value to a variable which is already declared.</p>\n<p><code class=\"language-text\">:=</code> is used to declare and assign value.</p>\n<p>Create a file called <code class=\"language-text\">assign.go</code> with the following code</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ta <span class=\"token operator\">:=</span> <span class=\"token number\">20</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Gives error since a is already declared</span>\n\ta <span class=\"token operator\">:=</span> <span class=\"token number\">30</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Execute <code class=\"language-text\">go run assign.go</code> to see the result as:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">./assign.go:7:4: no new variables on left side of :=</code></pre></div>\n<p>Variables declared without an initial value will have of <code class=\"language-text\">0</code> for numeric types, <code class=\"language-text\">false</code> for Boolean and empty string for strings.</p>","frontmatter":{"title":"Variables","date":"November 01, 2021","description":"Variables in Go?"}},"previous":{"fields":{"slug":"/golang/data-types/"},"frontmatter":{"title":"Data Types"}},"next":{"fields":{"slug":"/golang/constants/"},"frontmatter":{"title":"Constants"}}},"pageContext":{"id":"a29ec68e-2166-5326-889e-7090c50f3a08","previousPostId":"c09cead4-5492-522d-adc9-62a2fe5f9b0e","nextPostId":"a7e5a8b3-1d0a-5b6a-8e26-221ec8e001ae"}},
    "staticQueryHashes": ["2841359383"]}