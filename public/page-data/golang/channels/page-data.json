{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/golang/channels/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Backend-Verse"}},"markdownRemark":{"id":"a797d024-0502-558a-a24b-721431068965","excerpt":"Channels are a way for functions to communicate with each other. It can be thought as a medium to where one routine places data and is accessed by another…","html":"<p>Channels are a way for functions to communicate with each other.</p>\n<p>It can be thought as a medium to where one routine places data and is accessed by another routine.</p>\n<p>A channel can be declared with the syntax</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">channel_variable <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> datatype<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can send data to a channel using the syntax</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">channel_variable <span class=\"token operator\">&lt;-</span> variable_name</code></pre></div>\n<p>Example</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">ch <span class=\"token operator\">&lt;-</span> x</code></pre></div>\n<p>You can receive data from a channel using the syntax</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">variable_name <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> channel_variable</code></pre></div>\n<p>Example</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">y := &lt;- ch</code></pre></div>\n<p>In the above examples of goroutine, you have seen the main program doesn’t wait for the goroutine. But that is not the case when channels are involved.</p>\n<p>Suppose if a goroutine pushes data to channel, the main() will wait on the statement receiving channel data until it gets the data.</p>\n<p>You will see this in below example. First, write a normal goroutine and see the behaviour. Then modify the program to use channels and see the behaviour.</p>\n<p>Execute the below program</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside display()\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside main()\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The output will be</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Inside main()</code></pre></div>\n<p>The main() finished the execution and did exit before the goroutine executes. So the print inside the display() didn’t get executed.</p>\n<p>Now modify the above program to use channels and see the behaviour.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside display()\"</span><span class=\"token punctuation\">)</span>\n\tch <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1234</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n\tx <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> ch\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside main()\"</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Printing x in main() after taking from channel:\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The output will be</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Inside display()\nInside main()\nPrinting x in main() after taking from channel: 1234</code></pre></div>\n<p>Here what happens is the <code class=\"language-text\">main()</code> on reaching <code class=\"language-text\">x := &lt;-ch</code> will wait for data on channel ch. The <code class=\"language-text\">display()</code> has a wait of 5 seconds and then push data to the channel <code class=\"language-text\">ch</code>. The `main()v on receiving the data from the channel gets unblocked and continues its execution.</p>\n<p>The sender who pushes data to channel can inform the receivers that no more data will be added to the channel by closing the channel. This is mainly used when you use a loop to push data to a channel.</p>\n<p>A channel can be closed using</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>channel_name<span class=\"token punctuation\">)</span></code></pre></div>\n<p>And at the receiver end, it is possible to check whether the channel is closed using an additional variable while fetching data from channel using</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">variable_name<span class=\"token punctuation\">,</span> status <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> channel_variable</code></pre></div>\n<p>If the status is True it means you received data from the channel. If false, it means you are trying to read from a closed channel.</p>\n<p>You can also use channels for communication between goroutines. Need to use 2 goroutines – one pushes data to the channel and other receives the\ndata from the channel.</p>\n<p>See the below program:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// This subroutine pushes numbers 0 to 9 to the channel and closes the channel</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">add_to_channel</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Send data\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tch <span class=\"token operator\">&lt;-</span> i <span class=\"token comment\">// Pushing data to channel</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Closing the channel</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This subroutine fetches data from the channel and prints it.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">fetch_from_channel</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read data\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Fetch data from channel</span>\n\t\tx<span class=\"token punctuation\">,</span> flag <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ch\n\t\t<span class=\"token comment\">// flag is true if data is received from the channel</span>\n\t\t<span class=\"token comment\">// flag is false when the channel is closed</span>\n\t\t<span class=\"token keyword\">if</span> flag <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty channel\"</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Creating a channel variable to transport integer values</span>\n\tch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Invoking the subroutines to add and fetch from the channel</span>\n\t<span class=\"token comment\">// These routines execute simultaneously</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">add_to_channel</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">fetch_from_channel</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Delay is to prevent the exiting of main() before goroutines finish</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside main()\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here there are 2 subroutines one pushes data to the channel and other prints data to the channel. The function <code class=\"language-text\">add_to_channel</code> adds the numbers from 0to 9 and closes the channel.</p>\n<p>Simultaneously the function <code class=\"language-text\">fetch_from_channel</code> waits at <code class=\"language-text\">x, flag := &lt;-ch</code> and once the data become available, it prints the data. It exits once the flag is false which means the channel is closed.</p>\n<p>The wait in the <code class=\"language-text\">main()</code> is given to prevent the exiting of main() until the goroutines finish the execution.</p>\n<p>Execute the code and see the output as</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Read data\nSend data\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nEmpty channel\nInside main()</code></pre></div>","frontmatter":{"title":"Channels","date":"November 03, 2021","description":"Channels in Go?"}},"previous":{"fields":{"slug":"/golang/goroutines/"},"frontmatter":{"title":"Goroutines"}},"next":{"fields":{"slug":"/golang/select/"},"frontmatter":{"title":"Select"}}},"pageContext":{"id":"a797d024-0502-558a-a24b-721431068965","previousPostId":"4d4fe25e-daf9-5121-8f4b-078530508a57","nextPostId":"9b872abb-b6d2-5bce-95c6-c10940e650e0"}},
    "staticQueryHashes": ["2841359383"]}