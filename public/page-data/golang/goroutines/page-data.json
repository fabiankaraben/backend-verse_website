{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/golang/goroutines/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Backend-Verse"}},"markdownRemark":{"id":"4d4fe25e-daf9-5121-8f4b-078530508a57","excerpt":"A goroutine is a function which can run concurrently with other functions. Usually when a function is invoked the control gets transferred into the called…","html":"<p>A goroutine is a function which can run concurrently with other functions.</p>\n<p>Usually when a function is invoked the control gets transferred into the called function, and once its completed execution control returns to the calling function. The calling function then continues its execution.</p>\n<p>The calling function waits for the invoked function to complete the execution before it proceeds with the rest of the statements.</p>\n<p>But in the case of goroutine, the calling function will not wait for the execution of the invoked function to complete. It will continue to execute with the next statements.</p>\n<p>You can have multiple goroutines in a program.</p>\n<p>Also, the main program will exit once it completes executing its statements and it will not wait for completion of the goroutines invoked.</p>\n<p>Goroutine is invoked using keyword go followed by a function call.\nExample:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span></code></pre></div>\n<p>You will understand goroutines with the below examples. Execute the below program</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"In display\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Invoking the goroutine display()</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token comment\">// The main() continues without waiting for display()</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"In main\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The output will be</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">In main\nIn main\nIn main\nIn main\nIn main</code></pre></div>\n<p>Here the main program completed execution even before the goroutine started.</p>\n<p>The <code class=\"language-text\">display()</code> is a goroutine which is invoked using the syntax go <code class=\"language-text\">function_name(parameter list)</code></p>\n<p>In the above code, the <code class=\"language-text\">main()</code> doesn’t wait for the <code class=\"language-text\">display()</code> to complete, and the <code class=\"language-text\">main()</code> completed its execution before the display() executed its code. So the print statement inside <code class=\"language-text\">display()</code> didn’t get printed.</p>\n<p>Now we modify the program to print the statements from <code class=\"language-text\">display()</code> as well.</p>\n<p>We add a time delay of 2 sec in the for loop of <code class=\"language-text\">main()</code> and a 1 sec delay in the for loop of the <code class=\"language-text\">display()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"In display\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Invoking the goroutine display()</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"In main\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The output will be somewhat similar to</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">In display\nIn main\nIn display\nIn display\nIn main\nIn display\nIn display\nIn main\nIn main\nIn main</code></pre></div>\n<p>Here You can see both loops are being executed in an overlapping fashion because of the concurrent execution.</p>","frontmatter":{"title":"Goroutines","date":"November 03, 2021","description":"Goroutines in Go?"}},"previous":{"fields":{"slug":"/golang/concurrency/"},"frontmatter":{"title":"Concurrency"}},"next":{"fields":{"slug":"/golang/channels/"},"frontmatter":{"title":"Channels"}}},"pageContext":{"id":"4d4fe25e-daf9-5121-8f4b-078530508a57","previousPostId":"040bfee7-8a68-5f5d-9e34-d53ca34f7c7d","nextPostId":"a797d024-0502-558a-a24b-721431068965"}},
    "staticQueryHashes": ["2841359383"]}