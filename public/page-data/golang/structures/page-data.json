{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/golang/structures/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Backend-Verse"}},"markdownRemark":{"id":"064084d4-5b52-5ed8-aff8-7ac3da588f0a","excerpt":"A Structure is a user defined datatype which itself contains one more element of the same or different type. Using a structure is a 2 step process. Firstâ€¦","html":"<p>A Structure is a user defined datatype which itself contains one more element of the same or different type.</p>\n<p>Using a structure is a 2 step process.</p>\n<p>First, create (declare) a structure type.</p>\n<p>Second, create variables of that type to store values.</p>\n<p>Structures are mainly used when you want to store related data together.</p>\n<p>Consider a piece of employee information which has name, age, and address. You can handle this in 2 ways:</p>\n<ol>\n<li>Create 3 arrays - one array stores the names of employees, one stores age and the third one stores age.</li>\n<li>Declare a structure type with 3 fields- name, address, and age. Create an array of that structure type where each element is a structure object having</li>\n</ol>\n<p>name, address, and age.</p>\n<p>The first approach is not efficient. In these kinds of scenarios, structures are more convenient.</p>\n<p>The syntax for declaring a structure is:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> structname <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    variable_1 variable_1_type\n    variable_2 variable_2_type\n    variable_n variable_n_type\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An example of a structure declaration is</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> emp <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token builtin\">string</span>\n    address <span class=\"token builtin\">string</span>\n    age <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here a new user defined type named <code class=\"language-text\">emp</code> is created. Now, you can create variables of the type <code class=\"language-text\">emp</code> using the syntax</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> variable_name struct_name</code></pre></div>\n<p>An example is:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> empdata1 emp</code></pre></div>\n<p>You can set values for the <code class=\"language-text\">empdata1</code> as</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">empdata1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span>\nempdata1<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> <span class=\"token string\">\"Street-1, Sydney\"</span>\nempdata1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">30</span></code></pre></div>\n<p>You can also create a structure variable and assign values by</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">empdata2 <span class=\"token operator\">:=</span> emp<span class=\"token punctuation\">{</span><span class=\"token string\">\"Sam\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Building-1, Zurich\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, you need to maintain the order of elements. Sam will be mapped to name, next element to address and the last one to age.</p>\n<p>Execute the code below</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token comment\">// Declared the structure named emp</span>\n<span class=\"token keyword\">type</span> emp <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tname    <span class=\"token builtin\">string</span>\n\taddress <span class=\"token builtin\">string</span>\n\tage     <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Function which accepts variable of emp type and prints name property</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span>e emp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Declares a variable, empdata1, of the type emp</span>\n\t<span class=\"token keyword\">var</span> empdata1 emp\n\n\t<span class=\"token comment\">// Assign values to members of empdata1</span>\n\tempdata1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span>\n\tempdata1<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> <span class=\"token string\">\"Street-1, London\"</span>\n\tempdata1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n\n\t<span class=\"token comment\">// Declares and assign values to variable empdata2 of type emp</span>\n\tempdata2 <span class=\"token operator\">:=</span> emp<span class=\"token punctuation\">{</span><span class=\"token string\">\"Sam\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Building-1, Paris\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// Prints the member name of empdata1 and empdata2 using display function</span>\n\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>empdata1<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>empdata2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Output</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">John\nSam</code></pre></div>","frontmatter":{"title":"Structures","date":"November 03, 2021","description":"Structures in Go?"}},"previous":{"fields":{"slug":"/golang/pointers/"},"frontmatter":{"title":"Pointers"}},"next":{"fields":{"slug":"/golang/methods/"},"frontmatter":{"title":"Methods"}}},"pageContext":{"id":"064084d4-5b52-5ed8-aff8-7ac3da588f0a","previousPostId":"a1c3dbe5-6e1d-58a0-8ef5-d1e815d23b07","nextPostId":"4551d8ff-6e8e-59b9-b509-c4f9ba6bf37c"}},
    "staticQueryHashes": ["2841359383"]}