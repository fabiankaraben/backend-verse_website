{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/golang/select/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Backend-Verse"}},"markdownRemark":{"id":"9b872abb-b6d2-5bce-95c6-c10940e650e0","excerpt":"Select can be viewed as a switch statement which works on channels. Here the case statements will be a channel operation. Usually, each case statements will be…","html":"<p>Select can be viewed as a switch statement which works on channels. Here the case statements will be a channel operation. Usually, each case statements will be read attempt from the channel.</p>\n<p>When any of the cases is ready(the channel is read), then the statement associated with that case is executed. If multiple cases are ready, it will choose a random one.</p>\n<p>You can have a default case which is executed if none of the cases is ready.</p>\n<p>Let’s see the below code</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Push data to channel with a 4 second delay</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">data1</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\tch <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"from data1()\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Push data to channel with a 2 second delay</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">data2</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\tch <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"from data2()\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Creating channel variables for transporting string values</span>\n\tchan1 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\tchan2 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Invoking the subroutines with channel variables</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">data1</span><span class=\"token punctuation\">(</span>chan1<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">data2</span><span class=\"token punctuation\">(</span>chan2<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Both case statements wait for data in the chan1 or chan2.</span>\n\t<span class=\"token comment\">// chan2 gets data first since the delay is only 2 sec in data2().</span>\n\t<span class=\"token comment\">// So the second case will execute and exits the select block</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> x <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>chan1<span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> y <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>chan2<span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Executing the above program will give the output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from data2()</code></pre></div>\n<p>Here the select statement waits for data to be available in any of the channels. The data2() adds data to the channel after a sleep of 2 seconds which will cause the second case to execute.</p>\n<p>Add a default case to the select in the same program and see the output.</p>\n<p>Here, on reaching select block, if no case is having data ready on the channel, it will execute the default block without waiting for data to be available on any channel.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Push data to channel with a 4 second delay</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">data1</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\tch <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"from data1()\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Push data to channel with a 2 second delay</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">data2</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\tch <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"from data2()\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Creating channel variables for transporting string values</span>\n\tchan1 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\tchan2 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Invoking the subroutines with channel variables</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">data1</span><span class=\"token punctuation\">(</span>chan1<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">data2</span><span class=\"token punctuation\">(</span>chan2<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Both case statements check for data in chan1 or chan2.</span>\n\t<span class=\"token comment\">// But data is not available (both routines have a delay of 2 and 4 sec)</span>\n\t<span class=\"token comment\">// So the default block will be executed without waiting for data in channels.</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> x <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>chan1<span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> y <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>chan2<span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Default case executed\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This program will give the output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Default case executed</code></pre></div>\n<p>This is because when the select block reached, no channel had data for reading. So, the default case is executed.</p>","frontmatter":{"title":"Select","date":"November 03, 2021","description":"Select in Go?"}},"previous":{"fields":{"slug":"/golang/channels/"},"frontmatter":{"title":"Channels"}},"next":{"fields":{"slug":"/golang/mutex/"},"frontmatter":{"title":"Mutex"}}},"pageContext":{"id":"9b872abb-b6d2-5bce-95c6-c10940e650e0","previousPostId":"a797d024-0502-558a-a24b-721431068965","nextPostId":"6795bce4-f879-5313-8f9f-57a5a8d2184f"}},
    "staticQueryHashes": ["2841359383"]}