{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/golang/defer/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Backend-Verse"}},"markdownRemark":{"id":"4ed788c1-f0cb-5814-b627-fc7882c35798","excerpt":"Defer and stacking defers Defer statements are used to defer the execution of a function call until the function that contains the  statement completesâ€¦","html":"<h3>Defer and stacking defers</h3>\n<p>Defer statements are used to defer the execution of a function call until the function that contains the <code class=\"language-text\">defer</code> statement completes execution.</p>\n<p>Lets learn this with an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside the sample()\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// sample() will be invoked only after executing the statements of main()</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside the main()\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The output will be</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Inside the main()\nInside the sample()</code></pre></div>\n<p>Here execution of <code class=\"language-text\">sample()</code> is deferred until the execution of the enclosing function (<code class=\"language-text\">main()</code>) completes.</p>\n<p>Stacking defer is using multiple defer statements. Suppose you have multiple defer statements inside a function. Go places all the deferred function calls in a stack, and once the enclosing function returns, the stacked functions are executed in the Last In First Out (LIFO) order.</p>\n<p>You can see this in the below example.</p>\n<p>Execute the below code</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span>a <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The output will be</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">4\n3\n2\n1</code></pre></div>\n<p>Here the code inside the <code class=\"language-text\">main()</code> executes first, and then the deferred function calls are executed in the reverse order, i.e. 4, 3,2,1.</p>","frontmatter":{"title":"Defer","date":"November 02, 2021","description":"Defer in Go?"}},"previous":{"fields":{"slug":"/golang/packages/"},"frontmatter":{"title":"Packages"}},"next":{"fields":{"slug":"/golang/pointers/"},"frontmatter":{"title":"Pointers"}}},"pageContext":{"id":"4ed788c1-f0cb-5814-b627-fc7882c35798","previousPostId":"b3c4e43f-243f-5c21-852b-aa55f8293e16","nextPostId":"a1c3dbe5-6e1d-58a0-8ef5-d1e815d23b07"}},
    "staticQueryHashes": ["2841359383"]}